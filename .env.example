# ===========================================
# TASK MANAGER - Configuração Docker
# ===========================================
# Copie este arquivo para .env e ajuste os valores

# AMBIENTE
NODE_ENV=development
# Use: production para produção
DEBUG=false

# ===========================================
# DATABASE (PostgreSQL)
# ===========================================
DB_HOST=postgres
DB_USER=postgres
DB_PASSWORD=postgres123
DB_NAME=task_manager_dev
DB_PORT=5432
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public

# ===========================================
# REDIS (Cache e Sessões)
# ===========================================
REDIS_PASSWORD=redis123
REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379

# ===========================================
# BACKEND (Node.js + Express)
# ===========================================
BACKEND_PORT=3001
JWT_SECRET=sua_chave_jwt_super_segura_minimo_32_caracteres_aqui

# Opcional (não usado atualmente):
JWT_REFRESH_SECRET=sua_chave_refresh_jwt_super_segura_minimo_32_caracteres
JWT_EXPIRES_IN=7d

# ===========================================
# FRONTEND (React + Vite)
# ===========================================
FRONTEND_PORT=5173
VITE_API_URL=http://localhost:3001

# ===========================================
# SMTP (Email) - Configure para envio de emails
# ===========================================
# Para Gmail:
# 1. Acesse: https://myaccount.google.com/apppasswords
# 2. Crie uma senha de aplicativo
# 3. Use a senha gerada abaixo
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=seu-email@gmail.com
SMTP_PASS=sua-senha-de-aplicativo-16-digitos
SMTP_FROM="Task Manager <seu-email@gmail.com>"

# Para SendGrid (Produção):
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USER=apikey
# SMTP_PASS=sua-api-key-sendgrid

# ===========================================
# URLs PÚBLICAS
# ===========================================
FRONTEND_URL=http://localhost:5173
# Em produção: https://seu-dominio.com

# ===========================================
# UPLOAD (Anexos de Tarefas)
# ===========================================
MAX_FILE_SIZE=10485760
# 10MB em bytes (10 * 1024 * 1024)
UPLOAD_PATH=/app/uploads

# ===========================================
# RATE LIMITING (Segurança)
# ===========================================
RATE_LIMIT_WINDOW=900000
# 15 minutos em ms
RATE_LIMIT_MAX=100
# Máximo de requisições por janela

# ===========================================
# MONITORAMENTO (Opcional)
# ===========================================
# Grafana Admin
GF_SECURITY_ADMIN_PASSWORD=admin123

# PgAdmin (Interface Web PostgreSQL)
PGADMIN_EMAIL=admin@example.com
PGADMIN_PASSWORD=admin123

# ===========================================
# PRODUÇÃO (VPS/Servidor)
# ===========================================
# Descomente e configure para deploy
# SERVER_IP=123.456.789.0
# DOMAIN=seu-dominio.com

# ===========================================
# INSTRUÇÕES DE USO:
# ===========================================
#
# DESENVOLVIMENTO (Docker):
#   1. Copie: cp .env.example .env
#   2. Ajuste: SMTP_USER, SMTP_PASS, JWT_SECRET
#   3. Execute: docker-compose up -d
#   4. Migre DB: docker-compose exec backend npx prisma migrate dev
#
# DESENVOLVIMENTO (Local - sem Docker):
#   1. Copie: cp .env.example .env
#   2. Ajuste: DB_HOST=localhost, todos os outros valores
#   3. Instale: npm install (backend e frontend)
#   4. Migre DB: cd backend && npx prisma migrate dev
#   5. Execute: npm run dev (backend e frontend)
#
# PRODUÇÃO (Docker):
#   1. Crie: env/.env.production (baseado neste arquivo)
#   2. Configure: NODE_ENV=production, URLs públicas, SMTP profissional
#   3. Execute: docker-compose -f docker-compose.prod.yml up -d
#   4. Migre DB: docker-compose -f docker-compose.prod.yml exec backend npx prisma migrate deploy
#
# SEGURANÇA:
#   ⚠️ NUNCA commite o arquivo .env no Git
#   ⚠️ Use senhas fortes em produção
#   ⚠️ Gere JWT_SECRET seguro: openssl rand -base64 32
#
# ===========================================