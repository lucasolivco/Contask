generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Atualize o modelo User
model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(EMPLOYEE)
  isVerified   Boolean   @default(false)
  verificationToken String?
  departmentId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relacionamentos
  department     Department? @relation(fields: [departmentId], references: [id])
  createdTasks   Task[]      @relation("TaskCreator")
  assignedTasks  Task[]      @relation("TaskAssignee")
  notifications  Notification[]
  attachments    Attachment[]

  @@map("users")
}

// Atualize o modelo Task
model Task {
  id           String      @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus  @default(PENDING)
  priority     Priority    @default(MEDIUM)
  dueDate      DateTime?
  departmentId String?
  createdById  String
  assignedToId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relacionamentos
  department   Department?    @relation(fields: [departmentId], references: [id])
  createdBy    User           @relation("TaskCreator", fields: [createdById], references: [id])
  assignedTo   User           @relation("TaskAssignee", fields: [assignedToId], references: [id])
  attachments  Attachment[]
  notifications Notification[]

  @@map("tasks")
}

model Attachment {
  id       String @id @default(cuid())
  filename String
  originalName String
  mimeType String
  size     Int
  path     String
  
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  userId  String
  user    User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("attachments")
}

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  title   String
  message String
  read    Boolean          @default(false)
  
  userId  String
  user    User             @relation(fields: [userId], references: [id])
  
  taskId  String?
  task    Task?            @relation(fields: [taskId], references: [id])
  
  createdAt DateTime @default(now())

  @@map("notifications")
}

enum Role {
  MANAGER
  EMPLOYEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_OVERDUE
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  users User[]
  tasks Task[]
  
  @@map("departments")
}



