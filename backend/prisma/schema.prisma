generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ✅ SCHEMA CORRIGIDO COMPLETO
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Campos de verificação de email
  emailVerified Boolean @default(false)
  emailVerificationToken String? @unique
  tokenExpiresAt DateTime?

  // ✅ CAMPOS PARA RESET DE SENHA
  passwordResetToken String? @unique
  passwordResetExpiresAt DateTime?

  // ✅ RELACIONAMENTOS CORRIGIDOS COM NOMES ESPECÍFICOS
  createdTasks     Task[] @relation("CreatedBy")
  assignedTasks    Task[] @relation("AssignedTo")
  comments         Comment[] @relation("CommentAuthor")
  attachments      Attachment[] @relation("UploadedBy")
  notifications    Notification[]

  @@map("users")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  targetDate  DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // ✅ RELACIONAMENTOS CORRIGIDOS
  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])
  
  assignedToId String
  assignedTo   User   @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  // ✅ RELACIONAMENTOS COM OUTROS MODELOS
  attachments   Attachment[]
  notifications Notification[]
  comments      Comment[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ✅ RELACIONAMENTOS CORRIGIDOS
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  authorId String
  author   User   @relation("CommentAuthor", fields: [authorId], references: [id])

  @@map("comments")
}

model Attachment {
  id           String   @id @default(cuid())
  fileName     String
  originalName String
  mimeType     String
  fileSize     Int
  filePath     String
  createdAt    DateTime @default(now())

  // ✅ RELACIONAMENTOS CORRIGIDOS
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  uploadedById String
  uploadedBy   User   @relation("UploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  title   String
  message String
  read    Boolean          @default(false)
  
  userId  String
  user    User             @relation(fields: [userId], references: [id])
  
  taskId  String?
  task    Task?            @relation(fields: [taskId], references: [id])
  
  createdAt DateTime @default(now())

  @@map("notifications")
}

// ✅ ENUMS CORRETOS
enum Role {
  MANAGER
  EMPLOYEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_OVERDUE
}