import { Request, Response } from 'express'
import prisma from '../config/database'

interface AuthRequest extends Request {
  user?: {
    userId: string
    role: string
  }
}

// Buscar notifica√ß√µes do usu√°rio
export const getNotifications = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user!.userId
    const { limit = 50, offset = 0 } = req.query

    console.log(`üîî Buscando notifica√ß√µes para usu√°rio ${userId}`)

    const notifications = await prisma.notification.findMany({
      where: { userId },
      include: {
        task: {
          select: { id: true, title: true }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: Number(limit),
      skip: Number(offset)
    })

    const unreadCount = await prisma.notification.count({
      where: { 
        userId,
        read: false 
      }
    })

    console.log(`‚úÖ Encontradas ${notifications.length} notifica√ß√µes (${unreadCount} n√£o lidas)`)

    res.json({
      notifications,
      unreadCount
    })

  } catch (error) {
    console.error('‚ùå Erro ao buscar notifica√ß√µes:', error)
    res.status(500).json({ error: 'Erro interno do servidor' })
  }
}

// Contar notifica√ß√µes n√£o lidas
export const getUnreadCount = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user!.userId

    const unreadCount = await prisma.notification.count({
      where: { 
        userId,
        read: false 
      }
    })

    res.json({ unreadCount })

  } catch (error) {
    console.error('‚ùå Erro ao contar n√£o lidas:', error)
    res.status(500).json({ error: 'Erro interno do servidor' })
  }
}

// Marcar notifica√ß√£o como lida
export const markNotificationAsRead = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params
    const userId = req.user!.userId

    console.log(`üìñ Marcando notifica√ß√£o ${id} como lida para usu√°rio ${userId}`)

    // Verificar se a notifica√ß√£o pertence ao usu√°rio
    const notification = await prisma.notification.findFirst({
      where: { 
        id,
        userId 
      }
    })

    if (!notification) {
      return res.status(404).json({ error: 'Notifica√ß√£o n√£o encontrada' })
    }

    if (notification.read) {
      return res.json({ 
        message: 'Notifica√ß√£o j√° estava marcada como lida',
        notification 
      })
    }

    const updatedNotification = await prisma.notification.update({
      where: { id },
      data: { read: true },
      include: {
        task: {
          select: { id: true, title: true }
        }
      }
    })

    console.log(`‚úÖ Notifica√ß√£o marcada como lida: ${id}`)

    res.json({
      message: 'Notifica√ß√£o marcada como lida',
      notification: updatedNotification
    })

  } catch (error) {
    console.error('‚ùå Erro ao marcar como lida:', error)
    res.status(500).json({ error: 'Erro interno do servidor' })
  }
}

// Marcar todas as notifica√ß√µes como lidas
export const markAllNotificationsAsRead = async (req: AuthRequest, res: Response) => {
  try {
    const userId = req.user!.userId

    console.log(`üìñ Marcando todas as notifica√ß√µes como lidas para usu√°rio ${userId}`)

    const result = await prisma.notification.updateMany({
      where: { 
        userId,
        read: false 
      },
      data: { read: true }
    })

    console.log(`‚úÖ ${result.count} notifica√ß√µes marcadas como lidas`)

    res.json({
      message: `${result.count} notifica√ß√£o(√µes) marcada(s) como lida(s)`,
      updatedCount: result.count
    })

  } catch (error) {
    console.error('‚ùå Erro ao marcar todas como lidas:', error)
    res.status(500).json({ error: 'Erro interno do servidor' })
  }
}

// Excluir notifica√ß√£o
export const deleteNotification = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params
    const userId = req.user!.userId

    console.log(`üóëÔ∏è Excluindo notifica√ß√£o ${id} do usu√°rio ${userId}`)

    // Verificar se a notifica√ß√£o pertence ao usu√°rio
    const notification = await prisma.notification.findFirst({
      where: { 
        id,
        userId 
      }
    })

    if (!notification) {
      return res.status(404).json({ error: 'Notifica√ß√£o n√£o encontrada' })
    }

    await prisma.notification.delete({
      where: { id }
    })

    console.log(`‚úÖ Notifica√ß√£o exclu√≠da: ${id}`)

    res.json({
      message: 'Notifica√ß√£o exclu√≠da com sucesso'
    })

  } catch (error) {
    console.error('‚ùå Erro ao excluir notifica√ß√£o:', error)
    res.status(500).json({ error: 'Erro interno do servidor' })
  }
}