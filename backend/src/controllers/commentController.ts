// backend/src/controllers/commentController.ts - COM NOTIFICA√á√ïES

import { Request, Response } from 'express'
import prisma from '../config/database'
import { sendCommentAddedNotification } from '../services/notificationService'

interface AuthRequest extends Request {
  user?: {
    userId: string
    role: string
  }
}

// ‚úÖ BUSCAR COMENT√ÅRIOS DA TAREFA
export const getTaskComments = async (req: AuthRequest, res: Response) => {
  try {
    const { taskId } = req.params
    const userId = req.user!.userId

    // Verificar se o usu√°rio tem acesso √† tarefa
    const task = await prisma.task.findFirst({
      where: {
        id: taskId,
        OR: [
          { createdById: userId },
          { assignedToId: userId }
        ]
      }
    })

    if (!task) {
      return res.status(404).json({ error: 'Tarefa n√£o encontrada' })
    }

    const comments = await prisma.comment.findMany({
      where: { taskId },
      include: {
        author: {
          select: { id: true, name: true, email: true, role: true }
        }
      },
      orderBy: { createdAt: 'asc' }
    })

    console.log(`üí¨ ${comments.length} coment√°rios encontrados para tarefa ${taskId}`)

    res.json({ comments })

  } catch (error) {
    console.error('‚ùå Erro ao buscar coment√°rios:', error)
    res.status(500).json({ error: 'Erro interno do servidor' })
  }
}

// ‚úÖ CRIAR COMENT√ÅRIO COM NOTIFICA√á√ÉO
export const createComment = async (req: AuthRequest, res: Response) => {
  try {
    const { taskId } = req.params
    const { message } = req.body
    const userId = req.user!.userId

    if (!message || message.trim().length === 0) {
      return res.status(400).json({ error: 'Mensagem √© obrigat√≥ria' })
    }

    // Verificar se o usu√°rio tem acesso √† tarefa
    const task = await prisma.task.findFirst({
      where: {
        id: taskId,
        OR: [
          { createdById: userId },
          { assignedToId: userId }
        ]
      },
      include: {
        createdBy: { select: { id: true, name: true, email: true } },
        assignedTo: { select: { id: true, name: true, email: true } }
      }
    })

    if (!task) {
      return res.status(404).json({ error: 'Tarefa n√£o encontrada' })
    }

    // Criar coment√°rio
    const comment = await prisma.comment.create({
      data: {
        message: message.trim(),
        taskId,
        authorId: userId
      },
      include: {
        author: {
          select: { id: true, name: true, email: true, role: true }
        }
      }
    })

    console.log(`‚úÖ Coment√°rio criado por ${comment.author.name} na tarefa: ${task.title}`)

    // ‚úÖ ENVIAR NOTIFICA√á√ïES
    try {
      // Notificar o criador da tarefa (se n√£o for quem comentou)
      if (task.createdById !== userId) {
        await sendCommentAddedNotification({
          task,
          comment,
          author: comment.author,
          recipient: task.createdBy,
          type: 'creator'
        })
      }

      // Notificar o respons√°vel pela tarefa (se n√£o for quem comentou e n√£o for o criador)
      if (task.assignedToId !== userId && task.assignedToId !== task.createdById) {
        await sendCommentAddedNotification({
          task,
          comment,
          author: comment.author,
          recipient: task.assignedTo,
          type: 'assignee'
        })
      }

      console.log(`üîî Notifica√ß√µes de coment√°rio enviadas`)

    } catch (notificationError) {
      console.error('‚ö†Ô∏è Erro ao enviar notifica√ß√µes de coment√°rio:', notificationError)
      // N√£o falhar a cria√ß√£o do coment√°rio por causa da notifica√ß√£o
    }

    res.status(201).json({
      message: 'Coment√°rio adicionado com sucesso',
      comment
    })

  } catch (error) {
    console.error('‚ùå Erro ao criar coment√°rio:', error)
    res.status(500).json({ error: 'Erro interno do servidor' })
  }
}