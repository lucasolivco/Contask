// backend/src/config/database.ts - VERS√ÉO SEGURA

import { PrismaClient } from '@prisma/client'

const isDevelopment = process.env.NODE_ENV === 'development'

const prisma = new PrismaClient({
  log: isDevelopment ? ['query', 'info', 'warn', 'error'] : ['error'], // ‚úÖ S√ì ERROS EM PRODU√á√ÉO
  
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  },
})

// ‚úÖ MIDDLEWARE PARA LOG SEGURO
prisma.$use(async (params, next) => {
  const start = Date.now()
  
  try {
    const result = await next(params)
    
    // ‚úÖ LOG SEGURO (SEM DADOS SENS√çVEIS)
    if (isDevelopment) {
      const duration = Date.now() - start
      console.log(`üîç DB Query: ${params.model}.${params.action} - ${duration}ms`)
    }
    
    return result
  } catch (error) {
    // ‚úÖ LOG DE ERRO SEGURO
    console.error(`‚ùå DB Error: ${params.model}.${params.action}`, {
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    })
    throw error
  }
})

// ‚úÖ TESTE DE CONEX√ÉO SEGURO
async function testDatabaseConnection() {
  try {
    await prisma.$connect()
    console.log('‚úÖ Database connected successfully')
  } catch (error) {
    console.error('‚ùå Database connection failed:', error)
    process.exit(1)
  }
}

// ‚úÖ GRACEFUL SHUTDOWN
process.on('beforeExit', async () => {
  await prisma.$disconnect()
})

process.on('SIGINT', async () => {
  await prisma.$disconnect()
  process.exit(0)
})

process.on('SIGTERM', async () => {
  await prisma.$disconnect()
  process.exit(0)
})

// Testar conex√£o na inicializa√ß√£o
testDatabaseConnection()

export default prisma