#!/bin/bash

# =================================================
# üîÑ RESTAURA√á√ÉO DE BACKUP POSTGRESQL - PRODU√á√ÉO
# =================================================

source ./env/.env.production

BACKUP_DIR="./backups/auto"
LOG_DIR="./logs"
CONTAINER_NAME="task_manager-postgres-1"

# Criar diret√≥rio de logs
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/restore-$(date +%Y%m%d-%H%M%S).log"

log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

show_available_backups() {
    echo "üì¶ BACKUPS DISPON√çVEIS"
    echo "====================="
    echo ""
    
    if [ ! -d "$BACKUP_DIR" ]; then
        echo "‚ùå Diret√≥rio de backup n√£o encontrado: $BACKUP_DIR"
        return 1
    fi
    
    local backups=$(find "$BACKUP_DIR" -name "backup-*.sql*" -type f)
    
    if [ -z "$backups" ]; then
        echo "‚ùå Nenhum backup encontrado em $BACKUP_DIR"
        return 1
    fi
    
    echo "üìã Backups encontrados:"
    echo ""
    
    local count=1
    find "$BACKUP_DIR" -name "backup-*.sql*" -type f -printf '%T@ %p\n' | \
    sort -nr | while read timestamp file; do
        local date_formatted=$(date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S')
        local size=$(du -h "$file" | cut -f1)
        local filename=$(basename "$file")
        
        echo "$count. $date_formatted - $filename ($size)"
        count=$((count + 1))
    done
    
    echo ""
    return 0
}

verify_backup_file() {
    local backup_file=$1
    
    if [ ! -f "$backup_file" ]; then
        echo "‚ùå Arquivo de backup n√£o encontrado: $backup_file"
        return 1
    fi
    
    # Verificar se √© arquivo comprimido
    if [[ "$backup_file" == *.gz ]]; then
        if ! gunzip -t "$backup_file" >/dev/null 2>&1; then
            echo "‚ùå Arquivo comprimido corrompido: $backup_file"
            return 1
        fi
        echo "‚úÖ Arquivo comprimido v√°lido"
    else
        if ! head -n 10 "$backup_file" | grep -q "PostgreSQL database dump" >/dev/null 2>&1; then
            echo "‚ùå Arquivo n√£o parece ser um backup PostgreSQL v√°lido"
            return 1
        fi
        echo "‚úÖ Arquivo de backup v√°lido"
    fi
    
    return 0
}

create_backup_before_restore() {
    log_message "INFO" "Criando backup de seguran√ßa antes da restaura√ß√£o..."
    
    local safety_backup="./backups/safety-backup-$(date +%Y%m%d-%H%M%S).sql"
    
    if docker exec "$CONTAINER_NAME" pg_dump -U "$DB_USER" "$DB_NAME" > "$safety_backup"; then
        gzip "$safety_backup"
        log_message "SUCCESS" "Backup de seguran√ßa criado: $safety_backup.gz"
        echo "‚úÖ Backup de seguran√ßa salvo em: $safety_backup.gz"
        return 0
    else
        log_message "ERROR" "Falha ao criar backup de seguran√ßa!"
        echo "‚ùå Falha ao criar backup de seguran√ßa!"
        return 1
    fi
}

restore_full_database() {
    local backup_file=$1
    local skip_safety_backup=$2
    
    log_message "INFO" "=== INICIANDO RESTAURA√á√ÉO COMPLETA ==="
    log_message "INFO" "Backup: $backup_file"
    
    # Verificar arquivo de backup
    if ! verify_backup_file "$backup_file"; then
        return 1
    fi
    
    # Criar backup de seguran√ßa (a menos que seja pulado)
    if [ "$skip_safety_backup" != "true" ]; then
        if ! create_backup_before_restore; then
            read -p "‚ö†Ô∏è Continuar sem backup de seguran√ßa? (y/N): " continue_without_safety
            if [ "$continue_without_safety" != "y" ]; then
                echo "‚ùå Restaura√ß√£o cancelada"
                return 1
            fi
        fi
    fi
    
    echo ""
    echo "‚ö†Ô∏è ATEN√á√ÉO: RESTAURA√á√ÉO COMPLETA"
    echo "================================"
    echo "Isso ir√°:"
    echo "‚Ä¢ üóëÔ∏è APAGAR todos os dados atuais"
    echo "‚Ä¢ üîÑ SUBSTITUIR por dados do backup"
    echo "‚Ä¢ ‚èπÔ∏è PARAR a aplica√ß√£o temporariamente"
    echo ""
    echo "üìÅ Backup: $(basename "$backup_file")"
    echo "üìÖ Data: $(stat -c %y "$backup_file" | cut -d'.' -f1)"
    echo ""
    read -p "üö® Tem CERTEZA que deseja continuar? (digite 'CONFIRMO'): " confirmation
    
    if [ "$confirmation" != "CONFIRMO" ]; then
        echo "‚ùå Restaura√ß√£o cancelada"
        return 1
    fi
    
    log_message "INFO" "Confirma√ß√£o recebida. Iniciando restaura√ß√£o..."
    
    # Parar aplica√ß√£o
    echo "‚èπÔ∏è Parando aplica√ß√£o..."
    docker-compose --env-file ./env/.env.production -f docker-compose.prod.yml stop app
    
    # Aguardar conex√µes fecharem
    sleep 10
    
    # Finalizar conex√µes ativas
    log_message "INFO" "Finalizando conex√µes ativas..."
    docker exec "$CONTAINER_NAME" psql -U "$DB_USER" -d postgres -c "
    SELECT pg_terminate_backend(pid) 
    FROM pg_stat_activity 
    WHERE datname = '$DB_NAME' AND pid <> pg_backend_pid();"
    
    # Dropar e recriar banco
    log_message "INFO" "Recriando banco de dados..."
    docker exec "$CONTAINER_NAME" psql -U "$DB_USER" -d postgres -c "DROP DATABASE IF EXISTS \"$DB_NAME\";"
    docker exec "$CONTAINER_NAME" psql -U "$DB_USER" -d postgres -c "CREATE DATABASE \"$DB_NAME\";"
    
    # Restaurar backup
    log_message "INFO" "Iniciando restaura√ß√£o dos dados..."
    
    if [[ "$backup_file" == *.gz ]]; then
        # Arquivo comprimido
        if gunzip -c "$backup_file" | docker exec -i "$CONTAINER_NAME" psql -U "$DB_USER" -d "$DB_NAME"; then
            log_message "SUCCESS" "Dados restaurados com sucesso!"
        else
            log_message "ERROR" "Falha na restaura√ß√£o dos dados!"
            return 1
        fi
    else
        # Arquivo n√£o comprimido
        if docker exec -i "$CONTAINER_NAME" psql -U "$DB_USER" -d "$DB_NAME" < "$backup_file"; then
            log_message "SUCCESS" "Dados restaurados com sucesso!"
        else
            log_message "ERROR" "Falha na restaura√ß√£o dos dados!"
            return 1
        fi
    fi
    
    # Verificar restaura√ß√£o
    log_message "INFO" "Verificando dados restaurados..."
    local user_count=$(docker exec "$CONTAINER_NAME" psql -U "$DB_USER" -d "$DB_NAME" -t -c "SELECT COUNT(*) FROM users;" 2>/dev/null | xargs)
    local task_count=$(docker exec "$CONTAINER_NAME" psql -U "$DB_USER" -d "$DB_NAME" -t -c "SELECT COUNT(*) FROM tasks;" 2>/dev/null | xargs)
    
    if [ -n "$user_count" ] && [ -n "$task_count" ]; then
        log_message "SUCCESS" "Verifica√ß√£o OK - Usu√°rios: $user_count, Tasks: $task_count"
        echo "‚úÖ Dados verificados: $user_count usu√°rios, $task_count tasks"
    else
        log_message "ERROR" "Falha na verifica√ß√£o dos dados restaurados!"
        echo "‚ùå Problema na verifica√ß√£o dos dados!"
    fi
    
    # Reiniciar aplica√ß√£o
    echo "üöÄ Reiniciando aplica√ß√£o..."
    docker-compose --env-file ./env/.env.production -f docker-compose.prod.yml up -d app
    
    sleep 15
    
    # Verificar se aplica√ß√£o subiu
    if docker ps --format '{{.Names}}' | grep -q "task_manager.*app"; then
        log_message "SUCCESS" "Aplica√ß√£o reiniciada com sucesso!"
        echo "‚úÖ Aplica√ß√£o reiniciada!"
    else
        log_message "ERROR" "Problema ao reiniciar aplica√ß√£o!"
        echo "‚ö†Ô∏è Verifique a aplica√ß√£o: docker-compose logs app"
    fi
    
    echo ""
    echo "üéâ RESTAURA√á√ÉO COMPLETA FINALIZADA!"
    echo "=================================="
    echo "üìä Resumo:"
    echo "‚Ä¢ Usu√°rios: $user_count"
    echo "‚Ä¢ Tasks: $task_count"
    echo "‚Ä¢ Log: $LOG_FILE"
    echo ""
    echo "üîç Verificar aplica√ß√£o:"
    echo "‚Ä¢ Status: docker-compose ps"
    echo "‚Ä¢ Logs: docker-compose logs app"
}

restore_table_only() {
    local backup_file=$1
    local table_name=$2
    
    echo "üîÑ RESTAURA√á√ÉO DE TABELA ESPEC√çFICA"
    echo "=================================="
    echo "‚ö†Ô∏è Esta fun√ß√£o ir√° substituir dados da tabela '$table_name'"
    echo "üìÅ Backup: $(basename "$backup_file")"
    echo ""
    read -p "Continuar? (y/N): " confirm
    
    if [ "$confirm" != "y" ]; then
        echo "‚ùå Cancelado"
        return 1
    fi
    
    # Fazer backup da tabela atual
    log_message "INFO" "Fazendo backup da tabela atual..."
    local table_backup="./backups/table-backup-$table_name-$(date +%Y%m%d-%H%M%S).sql"
    docker exec "$CONTAINER_NAME" pg_dump -U "$DB_USER" -t "$table_name" "$DB_NAME" > "$table_backup"
    
    # Extrair e restaurar apenas a tabela espec√≠fica
    if [[ "$backup_file" == *.gz ]]; then
        gunzip -c "$backup_file" | grep -A 10000 "CREATE TABLE.*$table_name" | docker exec -i "$CONTAINER_NAME" psql -U "$DB_USER" -d "$DB_NAME"
    else
        grep -A 10000 "CREATE TABLE.*$table_name" "$backup_file" | docker exec -i "$CONTAINER_NAME" psql -U "$DB_USER" -d "$DB_NAME"
    fi
    
    echo "‚úÖ Tabela '$table_name' restaurada"
    echo "üíæ Backup anterior salvo em: $table_backup"
}

# Menu principal
show_restore_menu() {
    echo "üîÑ MENU DE RESTAURA√á√ÉO POSTGRESQL"
    echo "================================"
    echo ""
    echo "1. üìã Listar backups dispon√≠veis"
    echo "2. üîÑ Restaura√ß√£o completa do banco"
    echo "3. üìä Restaurar apenas uma tabela"
    echo "4. üß™ Testar backup (sem restaurar)"
    echo "5. üìÅ Buscar backup por data"
    echo "6. üö® Restaura√ß√£o de emerg√™ncia"
    echo "0. ‚ùå Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " option
    
    case $option in
        1)
            show_available_backups
            ;;
        2)
            show_available_backups
            echo ""
            read -p "üìÅ Digite o nome completo do arquivo de backup: " backup_file
            if [ -n "$backup_file" ]; then
                if [[ "$backup_file" != /* ]]; then
                    backup_file="$BACKUP_DIR/$backup_file"
                fi
                restore_full_database "$backup_file"
            fi
            ;;
        3)
            show_available_backups
            echo ""
            read -p "üìÅ Nome do arquivo de backup: " backup_file
            read -p "üìã Nome da tabela: " table_name
            if [ -n "$backup_file" ] && [ -n "$table_name" ]; then
                if [[ "$backup_file" != /* ]]; then
                    backup_file="$BACKUP_DIR/$backup_file"
                fi
                restore_table_only "$backup_file" "$table_name"
            fi
            ;;
        4)
            show_available_backups
            echo ""
            read -p "üìÅ Nome do arquivo para testar: " backup_file
            if [ -n "$backup_file" ]; then
                if [[ "$backup_file" != /* ]]; then
                    backup_file="$BACKUP_DIR/$backup_file"
                fi
                verify_backup_file "$backup_file"
            fi
            ;;
        5)
            read -p "üìÖ Digite a data (YYYYMMDD): " date_search
            echo "üîç Backups da data $date_search:"
            find "$BACKUP_DIR" -name "backup-$date_search*.sql*" -exec basename {} \;
            ;;
        6)
            echo "üö® RESTAURA√á√ÉO DE EMERG√äNCIA"
            echo "============================"
            echo "Isto ir√°:"
            echo "‚Ä¢ Usar o backup mais recente"
            echo "‚Ä¢ Pular backup de seguran√ßa"
            echo "‚Ä¢ Executar restaura√ß√£o imediata"
            echo ""
            read -p "üö® Confirmar emerg√™ncia? (digite 'EMERGENCIA'): " emergency_confirm
            if [ "$emergency_confirm" = "EMERGENCIA" ]; then
                local latest_backup=$(find "$BACKUP_DIR" -name "backup-*.sql*" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
                if [ -n "$latest_backup" ]; then
                    echo "üìÅ Usando backup: $(basename "$latest_backup")"
                    restore_full_database "$latest_backup" "true"
                else
                    echo "‚ùå Nenhum backup encontrado!"
                fi
            fi
            ;;
        0)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida"
            ;;
    esac
}

# Execu√ß√£o
if [ $# -eq 0 ]; then
    show_restore_menu
else
    case $1 in
        "list")
            show_available_backups
            ;;
        "restore")
            if [ -z "$2" ]; then
                echo "‚ùå Especifique o arquivo de backup"
                echo "üí° Uso: $0 restore <arquivo_backup>"
                exit 1
            fi
            restore_full_database "$2"
            ;;
        "emergency")
            echo "üö® RESTAURA√á√ÉO DE EMERG√äNCIA AUTOM√ÅTICA"
            local latest_backup=$(find "$BACKUP_DIR" -name "backup-*.sql*" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
            if [ -n "$latest_backup" ]; then
                echo "üìÅ Backup mais recente: $(basename "$latest_backup")"
                restore_full_database "$latest_backup" "true"
            else
                echo "‚ùå Nenhum backup encontrado!"
                exit 1
            fi
            ;;
        *)
            echo "üõ†Ô∏è USO: $0 [list|restore <file>|emergency]"
            echo ""
            echo "  list           - Listar backups"
            echo "  restore <file> - Restaurar backup espec√≠fico"
            echo "  emergency      - Restaura√ß√£o de emerg√™ncia"
            echo "  (sem par√¢metros) - Menu interativo"
            ;;
    esac
fi
