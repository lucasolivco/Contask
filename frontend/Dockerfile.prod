# frontend/Dockerfile.prod - VERSÃO SEGURA E OTIMIZADA PARA PRODUÇÃO

# ✅ BUILD STAGE - Alinhado com a versão do Node.js de desenvolvimento
FROM node:20-alpine AS builder

WORKDIR /app
COPY package*.json ./
# Instala todas as dependências para que o script de build funcione
RUN npm ci 
COPY . .
RUN npm run build

# ✅ NGINX STAGE - Imagem final e otimizada
FROM nginx:alpine AS runner

# ✅ INSTALAR CURL PARA O HEALTHCHECK
RUN apk add --no-cache curl

# Copiar apenas os arquivos estáticos construídos do estágio anterior
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar a configuração do Nginx de um local corrigido
# NOTA: Mova seu arquivo `default.conf` para dentro da pasta `frontend/`
COPY default.conf /etc/nginx/conf.d/default.conf

# Ajustar permissões para o usuário padrão do Nginx
RUN chown -R nginx:nginx /usr/share/nginx/html /var/cache/nginx

# Usar o usuário não-root padrão e seguro do Nginx
USER nginx

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

CMD ["nginx", "-g", "daemon off;"]