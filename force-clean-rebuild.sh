#!/bin/bash
# force-clean-rebuild.sh

echo "üßπ LIMPEZA TOTAL - removendo TUDO..."

# Parar e remover containers
docker-compose --env-file ./env/.env.production -f docker-compose.prod.yml down --volumes --remove-orphans

# ‚úÖ REMOVER IMAGENS ESPEC√çFICAS DO PROJETO
echo "üóëÔ∏è Removendo imagens do projeto..."
docker rmi $(docker images | grep -E "(task_manager|frontend|backend)" | awk '{print $3}') 2>/dev/null || true

# ‚úÖ REMOVER IMAGENS SEM TAG
docker rmi $(docker images | grep "<none>" | awk '{print $3}') 2>/dev/null || true

# ‚úÖ LIMPAR CACHE DE BUILD
docker builder prune -f

# ‚úÖ REMOVER VOLUMES √ìRF√ÉOS
docker volume prune -f

# ‚úÖ REMOVER REDES √ìRF√ÉS
docker network prune -f

# ‚úÖ LIMPAR SISTEMA COMPLETO
docker system prune -af

echo "‚úÖ Limpeza total conclu√≠da!"

# Verificar se arquivos est√£o corretos
echo "üîç Verificando arquivos..."

if grep -q "ssl\|443\|certificate" frontend/default.conf; then
    echo "‚ùå ERRO: frontend/default.conf cont√©m SSL!"
    exit 1
else
    echo "‚úÖ frontend/default.conf OK (sem SSL)"
fi

if grep -q "/health" frontend/Dockerfile.prod; then
    echo "‚úÖ frontend/Dockerfile.prod OK (health check correto)"
else
    echo "‚ö†Ô∏è frontend/Dockerfile.prod precisa de corre√ß√£o no health check"
fi

echo ""
echo "üöÄ Agora execute o build for√ßado:"
echo "docker-compose --env-file ./env/.env.production -f docker-compose.prod.yml build --no-cache frontend"

